public void FunWithSplittingColumn()
		{
			// Get the hold of the active document
			Document doc=this.ActiveUIDocument.Document;
			Selection sel=this.ActiveUIDocument.Selection;
			
			// Propmt the user to select a column
			Reference r=sel.PickObject(ObjectType.Element,
			                           "Please select a column");
			
			Element column=doc.GetElement(r);
			
			FamilyInstance colAsFI=column as FamilyInstance;
			FamilySymbol colFamSmbl=colAsFI.Symbol;
			
			ICollection<ElementId> interferingElemIds=
				FindElementsInterferingWithThisElement(doc, column);
			
			if(interferingElemIds!=null &&
			   interferingElemIds.Count!=0)
			{
				// Select interfering slabs
				this.ActiveUIDocument.ShowElements(interferingElemIds);
				this.ActiveUIDocument.Selection.SetElementIds(interferingElemIds);
				
				List<Curve> crvs=new List<Curve>();
				IDictionary<Curve, Level> crvsLvls=new Dictionary<Curve, Level>();
				
				Curve currCrv=GetColumnAxis(column);
				
				IList<ElementId> orderedIntruderIds=
					interferingElemIds.OrderBy(id=>
					                           {
					                           	Element e=doc.GetElement(id);
					                           	Level lvl=doc.GetElement(e.LevelId) as Level;
					                           	return lvl.Elevation;
					                           }).ToList();
				
				ElementId prevElemId=(doc.GetElement(interferingElemIds.ElementAt(0))).LevelId;
				
				for(int i=0; i<orderedIntruderIds.Count; i++)
				{
					Element currElem=doc.GetElement(orderedIntruderIds.ElementAt(i));
					Solid elemSolid=GetSolid(currElem);
					
					SolidCurveIntersection results=
						elemSolid.IntersectWithCurve
						(currCrv,
						 new SolidCurveIntersectionOptions 
						 {ResultType=SolidCurveIntersectionMode.CurveSegmentsOutside});
					
					if(results.SegmentCount==2)
					{
						// if it is not the last segment
						if(i!=orderedIntruderIds.Count-1)
						{
							crvs.Add(results.GetCurveSegment(0));
							currCrv=results.GetCurveSegment(1);
							crvsLvls.Add(results.GetCurveSegment(0),(Level)doc.GetElement(prevElemId));
						}
						else
						{
							crvs.Add(results.GetCurveSegment(0));
							crvs.Add(results.GetCurveSegment(1));
							crvsLvls.Add(results.GetCurveSegment(0), (Level)doc.GetElement(prevElemId));
							crvsLvls.Add(results.GetCurveSegment(1), (Level)doc.GetElement(currElem.LevelId));
						}
					}
					else
					{
						currCrv=results.GetCurveSegment(0);
					}
					prevElemId=currElem.LevelId;
				}
				
				using(Transaction t=new Transaction(doc, "Split Column"))
				{
					t.Start();
					foreach(Curve crv in crvsLvls.Keys)
					{
						doc.Create.NewFamilyInstance
							(crv, colFamSmbl, crvsLvls[crv], StructuralType.Column);
					}
					
					doc.Delete(column.Id);
					t.Commit();
					
				}
			}
			
		}


static Solid GetSolid(Element elem)
		{
			Options opts=new Options {IncludeNonVisibleObjects=true};
			
			foreach(GeometryObject gObjL1 in elem.get_Geometry(new Options()))
			{
				if(gObjL1 is GeometryInstance)
				{
					GeometryInstance instance=
						gObjL1 as GeometryInstance;
					
					foreach(GeometryObject gObjL2 in
					        instance.GetInstanceGeometry(instance.Transform))
					{
						if(gObjL2 is Solid)
						{
							return (Solid)gObjL2;
						}
					}
				}
				
				else if(gObjL1 is Solid)
				{
					return (Solid)gObjL1;
				}
			}
			
			return null;
		}
		
		static Curve GetColumnAxis(Element column)
		{
			foreach(GeometryObject gObjL1 in
			        column.get_Geometry(new Options{IncludeNonVisibleObjects=true}))
			{
				if(gObjL1 is Curve)
					return (Curve)gObjL1;
			}
			
			return null;
			
		}
		
		static ICollection<ElementId> FindElementsInterferingWithThisElement(Document doc, Element column)
		{
			// Setup the filtered element collector for all document elements
			FilteredElementCollector interferingCollector=
				new FilteredElementCollector(doc);
			
			// Only accept floor element instances
			interferingCollector.OfClass(typeof(Floor));
			interferingCollector.WhereElementIsNotElementType();
			
			// Exclude intersections with the column itself
			List<ElementId> excludedElements=
				new List<ElementId> {column.Id};
			ExclusionFilter exclusionFilter=
				new ExclusionFilter(excludedElements);
			interferingCollector.WherePasses(exclusionFilter);
			
			// Set up a filter that matches elements the solid geometry of which
			// intersects with the column
			ElementIntersectsSolidFilter intersectionFilter=
				new ElementIntersectsSolidFilter(GetSolid(column));
			interferingCollector.WherePasses(intersectionFilter);
			
			return interferingCollector.ToElementIds();
		}
